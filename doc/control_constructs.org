#+title: Control constructs
#+setupfile: setup.org

* if statements

=if= statements are used to execute code when a condition is true.

#+begin_src python :session
  is_rainy = True
  if is_rainy:
      print('Bring your bumbershoot')
#+end_src

#+RESULTS[567ff1b03f22ad378345a25b649ad0b1ebde8ddd]:
: Bring your bumbershoot

These can be followed up by an =else=:

#+begin_src python :session
  if is_rainy:
      print('Bring your bumbershoot')
  else:
      print('No rain')
#+end_src

#+RESULTS[1c3de9eb1993bdb57d1a7c926bcd3d49c49bd639]:
: Bring your bumbershoot

#+begin_note
  *Note:* In Python, whitespace is used to define levels in the code. It
  is convention to use 4 spaces (not tabs) as the first level of
  indentation. The second level would be 4 more spaces (8 total) and so
  on.
#+end_note

If =is_rainy= to =False=, the code under the =else= statement is
executed instead of the code under the =if= statement.

More conditions can be added with =elif=.

#+begin_src python :session
  if is_rainy:
      print('Bring your bumbershoot')
  elif is_sunny:
      print('Bring your hat')
  else:
      print('No rain, no sun')
#+end_src

#+RESULTS[f12eeca69d573e4b21639fd4fe7bf73661cde89f]:
: Bring your bumbershoot

** Boolean operators

It is common to use boolean operators with =if= statements.

#+begin_src python :session
  some_number = 9
  print(some_number == 2)
#+end_src

#+RESULTS[762988d150d4ba74d7615b8f9f6ce06341c4fa03]:
: False

Start IPython by typing =ipython= in a terminal, and try out a few
more comparisons.

- =!==
- =<=
- =>==

#+begin_note
  *Note:* Above I am using =print= to see the results of the
  comparison, but if you're in IPython, you don't need to do this.
#+end_note

Using them within an =if= statement look like this:

#+begin_src python :session
  if some_number < 10:
      print('There are less than 10')
#+end_src

#+RESULTS[f9607016d716c68c6e64c36ab3ac32d67cac3da9]:
: There are less than 10

* for loops

=for= loops allow you to iterate over variables.

#+begin_src python :session
  genes = ['DNJC..uh', 'FOXP2', 'MET7B']
  for gene in genes:
      print('My favorite gene: ' + gene)
#+end_src

#+RESULTS[a4d9f80dc217488edbbe5e0d2ddf8776c486be23]:
: My favorite gene: DNJC..uh
: My favorite gene: FOXP2
: My favorite gene: MET7B

=for= and =if= statments can be nested.

#+begin_src python :session
  for gene in genes:
      if gene != 'MET7B':
          print(gene +  ', what a dumb gene')
#+end_src

#+RESULTS[b06e7055dfc419f51428ed6eb39ec17d85035b13]:
: DNJC..uh, what a dumb gene
: FOXP2, what a dumb gene

** Controlling for loops

Once a =for= loop is running, you often want to change the behavior
based on the current iteration. For example, if a certain value is
encountered, skip to the next iteration. This can be done with
=continue=, which means stop the current iteration of the loop right
here and go to the next iteration. Using =continue=, we can produce
the exact same results as the last block.

#+begin_src python :session
  for gene in genes:
      if gene == 'MET7B':
          continue
      print(gene +  ', what a dumb gene')
#+end_src

#+RESULTS[b77271fceb2dd6e07759c0ad4613c05821323b0c]:
: DNJC..uh, what a dumb gene
: FOXP2, what a dumb gene

Another common behavior is to break out of the loop completely if some
condition is met. =break= is the command to do this.

#+begin_src python
  lottery_numbers = [888, 301, 405, 772, 332]
  winning_number = 405
  for number in lottery_numbers:
      print(number)
      if number == winning_number:
          print('We have a winner')
          break
#+end_src

#+RESULTS[113db27c1f4d86fa874d2fab4b1aa3aa2f7841ec]:
: 888
: 301
: 405
: We have a winner

* while loops

There are also =while= loops in python. These allow the code to
continually be executed *while* a condition is met.

#+begin_src python
  number = 1
  while number < 4:
      print(number)
      number += 1
#+end_src

#+RESULTS[55a5fe6c09e1d07e86ae09b9a968c40da3046c3b]:
: 1
: 2
: 3

#+begin_note
  *Note:* The =+== is an assignment operator. It adds the value to the
  current value of the variable and then assigns the new value back to
  the variable. It is equivalent to =number = number + 1=. Similar
  operators exist for subtraction (=-==), multiplication (=*==), and
  division (=\==).
#+end_note
