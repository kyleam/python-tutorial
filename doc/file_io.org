#+TITLE: File input and output
#+SETUPFILE: setup.org

* Reading in files

First, we'll define the file name as a string. The specifies where the
file exists on the system.

#+BEGIN_SRC python :session
  infile = '../data/weights.csv'
#+END_SRC

#+RESULTS[868b66d585c50a55f7886434541f4152293fdba4]:

#+BEGIN_NOTE
  *Note:* In the path of the file name, =..= stands for go one directory
  up from the current directory. So in the above case, =weights.csv= is
  in the =data= directory that is one directory up.

  #+BEGIN_EXAMPLE
      .
      |_ current directory
      |   |
      |   |_ current python file
      |
      |_ data
          |
          |_ weights.csv
  #+END_EXAMPLE
#+END_NOTE

In order to work with files, a file handle needs to be created. This is
done using =open=.

#+BEGIN_SRC python :session
  infh = open(infile)
#+END_SRC

#+RESULTS[c64a24328ddbe828d8639176c476b4fed6421783]:

Once the file handle is created, there are several ways to read in the
contents.

** read

<<first-read-example>>The first way is =read=.

#+BEGIN_SRC python :session
  infh = open(infile)
  file_content = infh.read()
  print(file_content)
  infh.close()  # file should be closed after reading
#+END_SRC

#+RESULTS[2eea14c01bfc0a7ada69f22d146ca03fdc8d9e52]:
:
: person,weight
: John,201
: Sue,120
: Paul,150

As can be seen in the results, the contents are stored as a single
string (with new lines indicated by =\n=).

We could separate these lines into a list by using =split=.

#+BEGIN_SRC python :session
  infh = open(infile)
  file_content = infh.read()
  file_lines = file_content.split('\n')
  print(file_lines)
  infh.close()
#+END_SRC

#+RESULTS[11cebb375c616cd17dd977ecb14779e868d2582a]:
:
: ['person,weight', 'John,201', 'Sue,120', 'Paul,150', '']

While this works fine, this is such a common operation that there is a
built-in method for it.

** readlines

To get the file contents into a list separated by new lines, =readlines=
can be used.

#+BEGIN_SRC python :session
  infh = open(infile)
  file_lines = infh.readlines()
  print(file_lines)
  infh.close()
#+END_SRC

#+RESULTS[9f3ad8600bfd1026c293e3852a94b94d6ee2074f]:
:
: ['person,weight\n', 'John,201\n', 'Sue,120\n', 'Paul,150\n']

** Using a for loop

A common method for reading in file contents is to do it one line at a
time. This is particularly useful for large files that are too big to
fit into memory.

#+BEGIN_SRC python :session
  infh = open(infile)
  for line in infh:
      print('current line: ' + line.strip())

  infh.close()
#+END_SRC

#+RESULTS[7277035e9f826b3f95fffb6518c8f8ab1ad703fd]:
:
: current line: person,weight
: current line: John,201
: current line: Sue,120
: current line: Paul,150

#+BEGIN_NOTE
  *Note:* =strip= is used above to remove the new line (=\n=) at the end
   of the line
#+END_NOTE

* Writing files

Writing files is very similar to reading files, but there are a few
differences. Again, a file handle is created using =open=, but the
second argument to open must be =w=. This tells =open= the file is to be
written to, as opposed to reading. Another difference is that the file
that you a writing to does not need to exist on your file system (in
fact, it usually does not).

#+BEGIN_WARNING
  *WARNING:* If you open a file for writing that already exists, its
  content will be overwritten.
#+END_WARNING


#+BEGIN_SRC python :eval never
  outfile = 'test-outfile.txt'
  outfh = open(outfile, 'w')

  for number in range(3):
      outfh.write('this is line {}\n'.format(number))

  outfh.close()
#+END_SRC

The would result in a file (=test-outfile.txt=) that looks like this:

#+BEGIN_EXAMPLE
  this is line 0
  this is line 1
  this is line 2
#+END_EXAMPLE

* A better way to close files

In all the examples above, the file needs to be explicitly closed after
opening it. The =with= statement provides a convenient way to deal with
the opening and closing of files.

This is how the [[first-read-example][first read example]] would look using a
=with= statement.

#+BEGIN_SRC python :session
  with open(infile) as infh:
      file_content = infh.read()
#+END_SRC

#+RESULTS[bc9944bc592fa388f4a0cf97df7277a5827e5ee6]:


The =with= takes care of closing the file once the current level (marked
by indentation) is left. If a =w= is passed to =open=, the exact same
method can be used for writing files.

* Tasks

** Getting gene coordinates from a gencode file

The file data/[[../data/gencode-v10-50random.gtf][gencode-v10-50random.gtf]] contains 50 random protein-coding
genes from gencode version 10. Another file, data/[[../data/genes-5random.txt][genes-5random.txt]],
lists the names of 5 genes. Write a python script that reads in these
genes of interest and finds the coordinates using the gencode gtf file.

** Filter gene coordinates by size

Write a script that prints out all genes in
data/[[../data/gencode-v10-50random.gtf][gencode-v10-50random.gtf]] that span more than 100 kb. If this is too
easy, use =write= instead of print to save the gene coordinates to a
file. If this gives you 14 genes, you're probably in good shape.

** Merge program information

(from Sirisha)

data/[[../data/program-versions.csv][program-versions.csv]] lists the names of a few programs and their
current version. data/[[../data/program-dates.csv][program-dates.csv]] lists the names of the same
programs and their release date. Write a script that merges this
information into a single file that has three columns. It would look
something like this:

#+BEGIN_EXAMPLE
  Program,Date,Version
  Firefox,July,12
  ...
#+END_EXAMPLE
