#+title: Importing code from other files
#+setupfile: setup.org

* The importance of importing

The ability to bring in code from other files enables a program to use
other code (without requiring that python load up a huge amount of code
by default). Below a few scenarios are covered. All of these make use of
=import=.

* Importing modules from the Python standard library

Python ships with many modules in its standard library. The following
examples show how to access and use a module.

** math

=math= is a module in the standard library that you should check if
you're looking for a math-related function. For example, if you wanted
to take the square root of a number, =math= has you covered.

This is how we would import it:

#+begin_src python :eval never
  import math
#+end_src

If you are following along in IPython, you can see what is under
=math= by typing =math.<TAB>=. You will see =sqrt= there, along with
many others.

#+begin_src python :results output
  import math

  print(math.sqrt(64))
#+end_src

#+RESULTS:
: 8.0

Notice that to access something that belongs to the imported module, we
need to use a =.= after the module name.

** defaultdict

Another example is =defaultdict=, which is available in the [[http://docs.python.org/3.3/library/collections.html][collections]]
module. Let's see what functionality it adds to normal dictionaries.

We can access =defaultdict=, which is under =collections= just as we did
=sqrt=, which is under =math=.

#+begin_src python :eval never
  import collections
  # collections.<TAB>
#+end_src

Since =collections= contains several different data types and we are
only going to use =defaultdict=, we may just want to make that name
available directly. We can do that using =from=.

#+begin_src python :eval never
  from collections import defaultdict
#+end_src

Now, let's see why =defaultdict= is useful. Say we have a DNA sequence
and want to get a count of each base type. One way to do that would be
to make a dictionary with each base as a key and increment the integer
value each time a base is encountered.

#+begin_src python :results output :session
  sequence = 'ATAGGGCCAAAAAA'

  base_counts = {}
  for base in sequence:
      base_counts[base] = base_counts.setdefault(base, 0) + 1

  print(base_counts)
#+end_src

#+RESULTS[4617038c980732ee4cb0a3a870b5dd2ce48fdb39]:
: {'T': 1, 'A': 8, 'C': 2, 'G': 3}

This works, but notice we use =setdefault=. This says to use the value
for the key =base= if it exists, otherwise initialize the value at 0.
Run this code without the =setdefault= to convince yourself that you
would get a key error.

#+begin_src python :results output :session
  base_counts = {}
  for base in sequence:
      # base_counts[base] = base_counts[base] + 1
      base_counts[base] += 1  # Equivalent to the line above

  print(base_counts)
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 3, in <module>
: KeyError: 'A'
: {}

=defaultdict= takes care of this behind the scenes, so that there is no
need to use =setdefault=.

#+begin_src python :results output :session
  from collections import defaultdict

  base_counts = defaultdict(int)
  for base in sequence:
      base_counts[base] += 1

  print(base_counts)
#+end_src

#+RESULTS[4c2d63c8846d61359682af27d9b41dddb4046ccd]:
: defaultdict(<class 'int'>, {'T': 1, 'A': 8, 'C': 2, 'G': 3})

* Importing code from installed packages

Installed packages are also accessed by importing. These can be packages
that you installed with [[http://www.pip-installer.org/en/latest/][pip]] or ones from another method, such as an exe
installer. [[http://wiki.scipy.org/SciPy][SciPy]], as its name suggests, is a python package that has
many useful tools for science and engineering. Below we will import it
and use it to calculate a pearson correlation.

#+begin_src python :session
  from scipy.stats import pearsonr
#+end_src

#+RESULTS[cfd0f6befd8fab05d426efd09ad7600969ecf9e3]:

Remember, if you're in IPython, you can put =?= after the term of
interest to get more information on it. Running =pearsonr?= will display
its docstring. We see that it takes two arrays as arguments and returns
the pearson correlation and a pvalue. Let's just test it out on inputs
that we know should have a correlation of 1.

#+begin_src python :session :results output
  print(pearsonr([1, 2, 3], [1, 2, 3]))
#+end_src

#+RESULTS[02a581316d505c5cd4adb2511a07674d4a0ae7cc]:
: (1.0, 0.0)

* Importing your own code

Another important use of =import= is accessing code that you've
written. This allows you to group related code in one file and access
it with many files, without having to duplicate the code in each file.

One example is the =codon_to_aminoacid= dictionary that is in
code/[[../code/codon_mapping.py][codon_mapping.py]]. If we wanted to use this dictionary in another
file, without copying it over, we could import it.

#+begin_src python :eval never
  from codon_mapping import codon_to_aminoacid
#+end_src

Now you can access the variable =codon_to_aminoacid= just as you would
if you created the dictionary within that file. But what if you hate
that name for a variable that you are importing? Well, you could of
course just assign it a new name after the import.

#+begin_src python :eval never
  new_name = codon_to_aminoacid
#+end_src

There is also a way to rename it during the import.

#+begin_src python
  from codon_mapping import codon_to_aminoacid as new_name
#+end_src


* Preventing code from running at import

Frequently, you have code that you only want to execute if you run the
file from the command line (=python <script name>=), but not if you
import it.

This is done using this special line:

#+begin_src python :eval never
  ## This code is available after importing this file or when running
  ## this file from the command line.
  def add_two(num):
      return num + 2

  if __name__ == '__main__':
      ## This code is only executed when running this file from the
      ## command line.
      print("I'm adding two now.")
      plus2 = add_two(3)
#+end_src

Because we've used the special =if __name__...= line, we can import
=add_two= from this file into another file (or IPython session)
without worrying about the code at the bottom being executed. See
code/[[../code/strjoin.py][strjoin.py]] for an example script that we made in class.
